(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return d}));var i=t(3),a=t(7),o=(t(0),t(90)),r={id:"config",title:"Config",sidebar_label:"Config"},l={unversionedId:"getstarted/config",id:"getstarted/config",isDocsHomePage:!1,title:"Config",description:"Hierarchy of parameters",source:"@site/docs/getstarted/config.md",slug:"/getstarted/config",permalink:"/vsync/docs/getstarted/config",editUrl:"https://github.com/ExpediaGroup/vsync/edit/master/website/docs/getstarted/config.md",version:"current",sidebar_label:"Config",sidebar:"someSidebar",previous:{title:"Install",permalink:"/vsync/docs/getstarted/install"},next:{title:"Options",permalink:"/vsync/docs/deploy/options"}},s=[{value:"Hierarchy of parameters",id:"hierarchy-of-parameters",children:[]},{value:"Config",id:"config",children:[{value:"Origin",id:"origin",children:[]},{value:"Destination",id:"destination",children:[]}]},{value:"Env",id:"env",children:[]},{value:"Config file",id:"config-file",children:[]},{value:"Examples",id:"examples",children:[{value:"Origin",id:"origin-1",children:[]},{value:"Simple destination",id:"simple-destination",children:[]},{value:"Destination with transformers",id:"destination-with-transformers",children:[]},{value:"Destination is same as origin",id:"destination-is-same-as-origin",children:[]}]}],c={toc:s};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"hierarchy-of-parameters"},"Hierarchy of parameters"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'"--cli-params" overrides\n    "VSYNC_ENV_VARS" overrides\n        "{config.vars}" overrides\n            "default"\n')),Object(o.b)("h2",{id:"config"},"Config"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"--config")," : cli parameter to specify the location of config"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"--version")," : to get build version, build commit, build time information of vsync"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"syncPath"),' : consul kv path where vsync has to store its meta data (default: "vsync/")'),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Deprecated after v0.1.1, replaced by syncPath in origin and destination")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"dataPaths")," : array of vault paths / mounts which needs to be synced"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Deprecated after v0.0.1, replaced by mounts in origin and destination")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"log.level"),' : level of logs that needs to be printed to output; options: info | debug (default: "info")'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"log.type"),' : level of logs that needs to be printed to output; options: console | json (default: "console")'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"numBuckets")," : sync info in consul kv will have N number of buckets and 1 index, each bucket is a map of path:insight. You will need to increase it as you hit per consul kv size limit. It must be same for origin and destinations. (default: 1)"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ignoreDeletes")," : flag for vsync destination to ignore syncing deletes from origin side. (default: false). "),Object(o.b)("h5",{id:"does-not-save-deletes-in-destination-sync-info-too-so-it-has-to-compute-the-differences-every-time-but-useful-for-seeing-changes-between-origin-and-destination-at-any-point-in-time"},"Does not save deletes in destination sync info too so it has to compute the differences every time but useful for seeing changes between origin and destination at any point in time."),Object(o.b)("h3",{id:"origin"},"Origin"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin")," : top level key for all origin related config parameters"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.dc"),' : origin consul datacenter. "--origin.dc" cli param'),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Deprecated after v0.1.1, replaced by dc in origin.consul.dc")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault")," : origin vault top level key"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault.address"),' : origin vault address where we need to get metadata ( vault kv metadata ). "--origin.vault.address" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault.token"),' : origin vault token which has permissions to read, update, write in vault mounts. "--origin.vault.token" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault.approle.path"),' : origin vault approle path. "--origin.vault.approle.path" cli param (use token OR approle) (default: approle)'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault.approle.role_id"),' : origin vault role_id from an approle which has permissions to read, update, write in vault mounts. "--origin.vault.approle.role_id" cli param (use token OR approle)'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.vault.approle.secret_id"),' : origin vault secret_id from an approle which has permissions to read, update, write in vault mounts. "--origin.vault.approle.secret_id" cli param (use token OR approle). ENV variable VSYNC_ORIGIN_VAULT_APPROLE_SECRET_ID'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.mounts")," : array of vault paths / mounts which needs to be synced. Each value needs to end with /. Token permissions to read, update, delete are checked for each cycle."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.consul.address"),' : origin consul address where we need to store vsync meta data ( sync info ). "--origin.consul.address" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.consul.dc"),' : origin consul datacenter. "--origin.consul.dc" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.numWorkers")," : number of get insights worker (default: 1)"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.tick"),' : interval for timer to start origin sync cycles. String format like 10m, 5s (default: "1m")'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.timout"),' : time limit trigger of a bomb, killing an existing sync cycle. String format like 10m, 5s (default: "5m")'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"origin.renewToken")," : renews origin vault periodic token and making it infinite token (default: true). See securely transfer origin vault token for more info."),Object(o.b)("h3",{id:"destination"},"Destination"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination")," : top level key for all destination related config parameters"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.dc")," : destination consul datacenter"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Deprecated after v0.1.1, replaced by dc in destination.consul.dc")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault")," : destination vault top level key"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault.address"),' : destination vault address where we need to get metadata ( vault kv metadata ). "--destination.vault.address" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault.token"),' : destination vault token which has permissions to read, update, write in vault mounts. "--destination.vault.token" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault.approle.path"),' : destination vault approle path. "--destination.vault.approle.path" cli param (use token OR approle) (default: approle)'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault.approle.role_id"),' : destination vault role_id from an approle which has permissions to read, update, write in vault mounts. "--destination.vault.approle.role_id" cli param (use token OR approle)'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.vault.approle.secret_id"),' : destination vault secret_id from an approle which has permissions to read, update, write in vault mounts. "--destination.vault.approle.secret_id" cli param (use token OR approle). ENV variable VSYNC_DESTINATION_VAULT_APPROLE_SECRET_ID'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.mounts")," : array of vault paths / mounts which needs to be synced. Each value needs to end with /. Token permissions to read, update, delete are checked for each cycle."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.consul.dc"),' : destination consul datacenter.  "--destination.consul.dc" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.consul.address"),' : destination consul address where we need to store vsync meta data ( sync info ). "--destination.consul.address" cli param'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.numWorkers")," : number of fetch and save worker (default: 1)."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.tick"),' : interval for timer to start destination sync cycles. String format like 10m, 5s (default: "1m")'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"destination.timout"),' : time limit trigger of a bomb, killing an existing sync cycle. String format like 10m, 5s (default: "5m")'),Object(o.b)("h2",{id:"env"},"Env"),Object(o.b)("p",null,"Setting ",Object(o.b)("inlineCode",{parentName:"p"},"VSYNC_*"),' envrionment variables will also have effects. eg: "VSYNC_LOGLEVEL=debug"'),Object(o.b)("h2",{id:"config-file"},"Config file"),Object(o.b)("p",null,"Supported format: json, hcl, yaml through ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/spf13/viper"}),"viper")),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("h3",{id:"origin-1"},"Origin"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'{\n    "log": {\n        "level": "debug",\n        "type": "console"\n    },\n    "logLevel": "info",\n    "numBuckets": 19,\n    "origin": {\n        "vault": {\n            "address": "http://127.0.0.1:6200",\n            "token": "s.MDLmK6gOVLL33bB5TkdnJPOB"\n        },\n        "consul": {\n            "dc": "dc1",\n            "address": "http://127.0.0.1:6500"\n        },\n        "mounts": [\n            "secret/"\n        ],\n        "syncPath": "vsync/",\n        "numWorkers": 5,\n        "tick": "10s",\n        "timeout": "10s"\n    }\n}\n')),Object(o.b)("h3",{id:"simple-destination"},"Simple destination"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'{\n    "log": {\n        "level": "debug",\n        "type": "console"\n    },\n    "numBuckets": 19,\n    "origin": {\n        "vault": {\n            "address": "http://127.0.0.1:6200",\n            "token": "s.8Te1siHQnIoJ4k6el4pioQhz"\n        },\n        "consul": {\n            "dc": "dc1",\n            "address": "http://127.0.0.1:6500"\n        },\n        "mounts": [\n            "secret/"\n        ],\n        "syncPath": "vsync/",\n        "numWorkers": 5,\n        "tick": "10s",\n        "timeout": "10s"\n    },\n    "destination": {\n        "vault": {\n            "address": "http://127.0.0.1:7200",\n            "token": "s.5LvYTJQhwyh2CvrZtUpnHeLb"\n        },\n        "consul": {\n            "dc": "dc2",\n            "address": "http://127.0.0.1:7500"\n        },\n        "syncPath": "vsync/",\n        "numWorkers": 10,\n        "tick": "10s",\n        "timeout": "10s"\n    }\n}\n')),Object(o.b)("h3",{id:"destination-with-transformers"},"Destination with transformers"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'{\n    "log": {\n        "level": "debug",\n        "type": "console"\n    },\n    "numBuckets": 19,\n    "origin": {\n        "vault": {\n            "address": "http://127.0.0.1:6200",\n            "token": "s.8Te1siHQnIoJ4k6el4pioQhz"\n        },\n        "consul": {\n            "dc": "dc1",\n            "address": "http://127.0.0.1:6500"\n        },\n        "mounts": [\n            "runner/"\n        ],\n        "syncPath": "vsync/",\n        "numWorkers": 5,\n        "tick": "10s",\n        "timeout": "10s"\n    },\n    "destination": {\n        "vault": {\n            "address": "http://127.0.0.1:7200",\n            "token": "s.5LvYTJQhwyh2CvrZtUpnHeLb"\n        },\n        "consul": {\n            "dc": "dc2",\n            "address": "http://127.0.0.1:7500"\n        },\n        "syncPath": "vsync/",\n        "numWorkers": 10,\n        "tick": "10s",\n        "timeout": "10s",\n        "transforms": [\n            {\n                "name": "v1->v2",\n                "from": "(?P<mount>secret)/(?P<meta>((meta)?data))?/(?P<platform>runner)/(?P<env>(dev|test|stage|prod))?/?(?P<app>\\\\w+)?/?",\n                "to": "runner/meta/env/app/secrets"\n            }\n        ]\n    }\n}\n')),Object(o.b)("h3",{id:"destination-is-same-as-origin"},"Destination is same as origin"),Object(o.b)("p",null,"We are transforming from one mount to another"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'{\n    "log": {\n        "level": "debug",\n        "type": "console"\n    },\n    "numBuckets": 19,\n    "origin": {\n        "vault": {\n            "address": "http://127.0.0.1:6200",\n            "token": "s.MDLmK6gOVLL33bB5TkdnJPOB"\n        },\n        "consul": {\n            "dc": "dc1",\n            "address": "http://127.0.0.1:6500"\n        },\n        "mounts": [\n            "runner/"\n        ],\n        "syncPath": "vsync/",\n        "numWorkers": 5,\n        "tick": "10s",\n        "timeout": "10s"\n    },\n    "destination": {\n        "vault": {\n            "address": "http://127.0.0.1:6200",\n            "token": "s.MDLmK6gOVLL33bB5TkdnJPOB"\n        },\n        "consul": {\n            "dc": "dc1",\n            "address": "http://127.0.0.1:6500"\n        },\n        "syncPath": "vsync/",\n        "numWorkers": 10,\n        "tick": "10s",\n        "timeout": "10s",\n        "transforms": [\n            {\n                "name": "v1->v2",\n                "from": "(?P<mount>secret)/(?P<meta>((meta)?data))?/(?P<platform>runner)/(?P<env>(dev|test|stage|prod))?/?(?P<app>\\\\w+)?/?",\n                "to": "runner/meta/env/app/secrets"\n            }\n        ]\n    }\n}\n')))}d.isMDXComponent=!0},90:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var i=t(0),a=t.n(i);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),b=i,m=p["".concat(r,".").concat(b)]||p[b]||u[b]||o;return t?a.a.createElement(m,l(l({ref:n},c),{},{components:t})):a.a.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);